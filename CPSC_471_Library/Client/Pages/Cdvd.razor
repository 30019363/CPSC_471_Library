@page "/cdvd"
@page "/cdvd/{id:int}"
@inject ICdvdService CdvdService

@if (Id == null)
{
    
}
else
{
	<h1>@cdvd.Title</h1>
	<table class="table" style="width:100%">
		<thead>
			<tr>
				<th>Producer</th>
				<th>Release Year</th>
				<th>Distribution</th>
				<th>Copies Available</th>
				<th>Genre</th>
				<th>Location</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>@cdvd.Producer</td>
				<td>@cdvd.ReleaseYear</td>
				<td>@cdvd.Distribution</td>
				<td>@cdvd.Copies</td>
				<td>@cdvd.Genre</td>
				<td>@cdvd.Location</td>
			</tr>
		</tbody>
	</table>
}

@* Modals + buttons for staff ui*@
@if (!string.IsNullOrEmpty(mainLayout.GetUserName()))
{
    <button type="button" class="btn btn-danger" @onclick="ShowDelete">Delete</button>
    <button type="submit" class="btn btn-primary" @onclick="ShowEdit"><i class="oi oi-pencil"></i></button>
}


<div class="modal fade @(showDelete ? "show" : "")  @(displayDelete ? "d-block" : "d-none")" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Are you sure you want to delete @cdvd.Title? </h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseDelete">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
            <div class="modal-footer">
				<button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="DeleteCdvd">Delete</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDelete">No</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade @(showEdit ? "show" : "")  @(displayEdit ? "d-block" : "d-none")" id="modalLong" tabindex="-1" role="dialog" aria-labelledby="modalLongTitle" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalLongTitle">Edit CD/DVD</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseEdit">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
		<label for="loginEmail" class="form-label">Title</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="CD/DVD title..." autocomplete="off" @bind-value="title" required/>
		<label for="loginEmail" class="form-label">Location(s)</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="Seperate locations with commas ," autocomplete="off" required @bind-value="loc" />
		<label for="loginEmail" class="form-label">Producer</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="Name of producer..." autocomplete="off" required @bind-value="pro" />
		<label for="loginEmail" class="form-label">Available Copies</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="Number of available copies..." autocomplete="off" required @bind-value="copies" />  
		<label for="loginEmail" class="form-label">Release Year</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="Year of release..." autocomplete="off" required @bind-value="pub" />
		<label for="loginEmail" class="form-label">Distribution</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="CD or DVD..." autocomplete="off" required @bind-value="dis" />
		<label for="loginEmail" class="form-label">Genre(s)</label>
		<input type="text" class="form-control" id="loginEmail" placeholder="Seperate genres with commas ," autocomplete="off" required @bind-value="genre" />
	</div>
      <div class="modal-footer">
		 <button type="button" class="btn btn-primary" @onclick="EditCdvd">Edit</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseEdit">Cancel</button>
      </div>
    </div>
  </div>
</div>
@* End of staff ui features*@

@code {
	[Parameter]
	public int? Id { get; set; }
	[CascadingParameter]
	public MainLayout mainLayout { get; set; }

	private bool showDelete, displayDelete, showEdit, displayEdit;
	string? title, loc, pro, copies, pub, dis, genre;

	CPSC_471_Library.Shared.CDVD cdvd = new CPSC_471_Library.Shared.CDVD();

	protected override async Task OnParametersSetAsync()
	{
		if (Id == null)
		{
			// do something
		}
		else
		{
			try {
				cdvd = await CdvdService.GetSingleCdvd((int)Id);
			} 
			catch (Exception ex)
			{
				// no book to show (this book was deleted but not redirected fast enough)
			}

		}
	}

	// This is for staff ui
	private async Task DeleteCdvd()
	{
		await CdvdService.RemoveCdvd(cdvd.Id);
		await CloseDelete();
	}

	private async Task EditCdvd()
	{
		if (title != null)
			cdvd.Title = title;
		if (loc != null)
			cdvd.Location = loc;
		if (pro != null)
			cdvd.Producer = pro;
		if (copies != null)
			cdvd.Copies = Int32.Parse(copies);
		if (pub != null)
			cdvd.ReleaseYear = pub;
		if (dis != null)
			cdvd.Distribution = dis;
		if (genre != null)
			cdvd.Genre = genre;
		await CdvdService.UpdateCdvd(cdvd);
		await CloseEdit();
	}

	public async Task ShowDelete()
	{
		displayDelete = true;
		await Task.Delay(100);
		showDelete = true;
	}

	private async Task CloseDelete()
	{
		showDelete = false;
		await Task.Delay(500);
		displayDelete = false;
	}

	public async Task ShowEdit()
	{
		displayEdit = true;
		await Task.Delay(100);
		showEdit = true;
	}

	private async Task CloseEdit()
	{
		showEdit = false;
		await Task.Delay(500);
		displayEdit = false;
	}
}
